//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.3
//
// <auto-generated>
//
// Generated from file `DepthEstimation.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __DepthEstimation_h__
#define __DepthEstimation_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace RoboCompDepthEstimation
{

class DepthEstimation;
class DepthEstimationPrx;

}

namespace RoboCompDepthEstimation
{

using ImgType = ::std::vector<::Ice::Byte>;

struct TImage
{
    int width;
    int height;
    int depth;
    ::RoboCompDepthEstimation::ImgType image;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const int&, const int&, const ::RoboCompDepthEstimation::ImgType&> ice_tuple() const
    {
        return std::tie(width, height, depth, image);
    }
};

using DepthValue = ::std::vector<float>;

struct DepthScene
{
    ::RoboCompDepthEstimation::DepthValue value;
    int width;
    int height;
    int depth;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::RoboCompDepthEstimation::DepthValue&, const int&, const int&, const int&> ice_tuple() const
    {
        return std::tie(value, width, height, depth);
    }
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace RoboCompDepthEstimation
{

class DepthEstimation : public virtual ::Ice::Object
{
public:

    using ProxyType = DepthEstimationPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void getDepthEstimation(TImage depthImg, DepthScene& result, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getDepthEstimation(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace RoboCompDepthEstimation
{

class DepthEstimationPrx : public virtual ::Ice::Proxy<DepthEstimationPrx, ::Ice::ObjectPrx>
{
public:

    void getDepthEstimation(const TImage& depthImg, DepthScene& result, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        result = _makePromiseOutgoing<::RoboCompDepthEstimation::DepthScene>(true, this, &DepthEstimationPrx::_iceI_getDepthEstimation, depthImg, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getDepthEstimationAsync(const TImage& depthImg, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompDepthEstimation::DepthScene>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompDepthEstimation::DepthScene, P>(false, this, &DepthEstimationPrx::_iceI_getDepthEstimation, depthImg, context);
    }

    ::std::function<void()>
    getDepthEstimationAsync(const TImage& depthImg,
                            ::std::function<void(::RoboCompDepthEstimation::DepthScene)> response,
                            ::std::function<void(::std::exception_ptr)> ex = nullptr,
                            ::std::function<void(bool)> sent = nullptr,
                            const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompDepthEstimation::DepthScene>(response, ex, sent, this, &RoboCompDepthEstimation::DepthEstimationPrx::_iceI_getDepthEstimation, depthImg, context);
    }

    /// \cond INTERNAL
    void _iceI_getDepthEstimation(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompDepthEstimation::DepthScene>>&, const TImage&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    DepthEstimationPrx() = default;
    friend ::std::shared_ptr<DepthEstimationPrx> IceInternal::createProxy<DepthEstimationPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits<::RoboCompDepthEstimation::TImage>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 13;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompDepthEstimation::TImage, S>
{
    static void read(S* istr, ::RoboCompDepthEstimation::TImage& v)
    {
        istr->readAll(v.width, v.height, v.depth, v.image);
    }
};

template<>
struct StreamableTraits<::RoboCompDepthEstimation::DepthScene>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 13;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompDepthEstimation::DepthScene, S>
{
    static void read(S* istr, ::RoboCompDepthEstimation::DepthScene& v)
    {
        istr->readAll(v.value, v.width, v.height, v.depth);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace RoboCompDepthEstimation
{

using DepthEstimationPtr = ::std::shared_ptr<DepthEstimation>;
using DepthEstimationPrxPtr = ::std::shared_ptr<DepthEstimationPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace RoboCompDepthEstimation
{

class DepthEstimation;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< DepthEstimation>&);
::IceProxy::Ice::Object* upCast(DepthEstimation*);
/// \endcond

}

}

namespace RoboCompDepthEstimation
{

class DepthEstimation;
/// \cond INTERNAL
::Ice::Object* upCast(DepthEstimation*);
/// \endcond
typedef ::IceInternal::Handle< DepthEstimation> DepthEstimationPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompDepthEstimation::DepthEstimation> DepthEstimationPrx;
typedef DepthEstimationPrx DepthEstimationPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(DepthEstimationPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace RoboCompDepthEstimation
{

typedef ::std::vector< ::Ice::Byte> ImgType;

struct TImage
{
    ::Ice::Int width;
    ::Ice::Int height;
    ::Ice::Int depth;
    ::RoboCompDepthEstimation::ImgType image;
};

typedef ::std::vector< ::Ice::Float> DepthValue;

struct DepthScene
{
    ::RoboCompDepthEstimation::DepthValue value;
    ::Ice::Int width;
    ::Ice::Int height;
    ::Ice::Int depth;
};

}

namespace RoboCompDepthEstimation
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompDepthEstimation::DepthEstimation::begin_getDepthEstimation.
 * Create a wrapper instance by calling ::RoboCompDepthEstimation::newCallback_DepthEstimation_getDepthEstimation.
 */
class Callback_DepthEstimation_getDepthEstimation_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DepthEstimation_getDepthEstimation_Base> Callback_DepthEstimation_getDepthEstimationPtr;

}

namespace IceProxy
{

namespace RoboCompDepthEstimation
{

class DepthEstimation : public virtual ::Ice::Proxy<DepthEstimation, ::IceProxy::Ice::Object>
{
public:

    void getDepthEstimation(const ::RoboCompDepthEstimation::TImage& depthImg, ::RoboCompDepthEstimation::DepthScene& result, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_getDepthEstimation(result, _iceI_begin_getDepthEstimation(depthImg, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getDepthEstimation(const ::RoboCompDepthEstimation::TImage& depthImg, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getDepthEstimation(depthImg, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDepthEstimation(const ::RoboCompDepthEstimation::TImage& depthImg, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getDepthEstimation(depthImg, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getDepthEstimation(const ::RoboCompDepthEstimation::TImage& depthImg, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getDepthEstimation(depthImg, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getDepthEstimation(const ::RoboCompDepthEstimation::TImage& depthImg, const ::RoboCompDepthEstimation::Callback_DepthEstimation_getDepthEstimationPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getDepthEstimation(depthImg, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getDepthEstimation(const ::RoboCompDepthEstimation::TImage& depthImg, const ::Ice::Context& context, const ::RoboCompDepthEstimation::Callback_DepthEstimation_getDepthEstimationPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getDepthEstimation(depthImg, context, cb, cookie);
    }

    void end_getDepthEstimation(::RoboCompDepthEstimation::DepthScene& result, const ::Ice::AsyncResultPtr& result_);
    /// \cond INTERNAL

    void _iceI_end_getDepthEstimation(::RoboCompDepthEstimation::DepthScene& iceP_result, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_getDepthEstimation(const ::RoboCompDepthEstimation::TImage&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace RoboCompDepthEstimation
{

class DepthEstimation : public virtual ::Ice::Object
{
public:

    typedef DepthEstimationPrx ProxyType;
    typedef DepthEstimationPtr PointerType;

    virtual ~DepthEstimation();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void getDepthEstimation(const TImage& depthImg, DepthScene& result, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getDepthEstimation(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const DepthEstimation& lhs, const DepthEstimation& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const DepthEstimation& lhs, const DepthEstimation& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::RoboCompDepthEstimation::TImage>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 13;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompDepthEstimation::TImage, S>
{
    static void write(S* ostr, const ::RoboCompDepthEstimation::TImage& v)
    {
        ostr->write(v.width);
        ostr->write(v.height);
        ostr->write(v.depth);
        ostr->write(v.image);
    }
};

template<typename S>
struct StreamReader< ::RoboCompDepthEstimation::TImage, S>
{
    static void read(S* istr, ::RoboCompDepthEstimation::TImage& v)
    {
        istr->read(v.width);
        istr->read(v.height);
        istr->read(v.depth);
        istr->read(v.image);
    }
};

template<>
struct StreamableTraits< ::RoboCompDepthEstimation::DepthScene>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 13;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompDepthEstimation::DepthScene, S>
{
    static void write(S* ostr, const ::RoboCompDepthEstimation::DepthScene& v)
    {
        ostr->write(v.value);
        ostr->write(v.width);
        ostr->write(v.height);
        ostr->write(v.depth);
    }
};

template<typename S>
struct StreamReader< ::RoboCompDepthEstimation::DepthScene, S>
{
    static void read(S* istr, ::RoboCompDepthEstimation::DepthScene& v)
    {
        istr->read(v.value);
        istr->read(v.width);
        istr->read(v.height);
        istr->read(v.depth);
    }
};

}
/// \endcond

namespace RoboCompDepthEstimation
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompDepthEstimation::DepthEstimation::begin_getDepthEstimation.
 * Create a wrapper instance by calling ::RoboCompDepthEstimation::newCallback_DepthEstimation_getDepthEstimation.
 */
template<class T>
class CallbackNC_DepthEstimation_getDepthEstimation : public Callback_DepthEstimation_getDepthEstimation_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const DepthScene&);

    CallbackNC_DepthEstimation_getDepthEstimation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        DepthEstimationPrx proxy = DepthEstimationPrx::uncheckedCast(result->getProxy());
        DepthScene iceP_result;
        try
        {
            proxy->end_getDepthEstimation(iceP_result, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(iceP_result);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompDepthEstimation::DepthEstimation::begin_getDepthEstimation.
 */
template<class T> Callback_DepthEstimation_getDepthEstimationPtr
newCallback_DepthEstimation_getDepthEstimation(const IceUtil::Handle<T>& instance, void (T::*cb)(const DepthScene&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DepthEstimation_getDepthEstimation<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompDepthEstimation::DepthEstimation::begin_getDepthEstimation.
 */
template<class T> Callback_DepthEstimation_getDepthEstimationPtr
newCallback_DepthEstimation_getDepthEstimation(T* instance, void (T::*cb)(const DepthScene&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DepthEstimation_getDepthEstimation<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompDepthEstimation::DepthEstimation::begin_getDepthEstimation.
 * Create a wrapper instance by calling ::RoboCompDepthEstimation::newCallback_DepthEstimation_getDepthEstimation.
 */
template<class T, typename CT>
class Callback_DepthEstimation_getDepthEstimation : public Callback_DepthEstimation_getDepthEstimation_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const DepthScene&, const CT&);

    Callback_DepthEstimation_getDepthEstimation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        DepthEstimationPrx proxy = DepthEstimationPrx::uncheckedCast(result->getProxy());
        DepthScene iceP_result;
        try
        {
            proxy->end_getDepthEstimation(iceP_result, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(iceP_result, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompDepthEstimation::DepthEstimation::begin_getDepthEstimation.
 */
template<class T, typename CT> Callback_DepthEstimation_getDepthEstimationPtr
newCallback_DepthEstimation_getDepthEstimation(const IceUtil::Handle<T>& instance, void (T::*cb)(const DepthScene&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DepthEstimation_getDepthEstimation<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompDepthEstimation::DepthEstimation::begin_getDepthEstimation.
 */
template<class T, typename CT> Callback_DepthEstimation_getDepthEstimationPtr
newCallback_DepthEstimation_getDepthEstimation(T* instance, void (T::*cb)(const DepthScene&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DepthEstimation_getDepthEstimation<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
