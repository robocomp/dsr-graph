//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.3
//
// <auto-generated>
//
// Generated from file `CommonBehavior.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __CommonBehavior_h__
#define __CommonBehavior_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace RoboCompCommonBehavior
{

class CommonBehavior;
class CommonBehaviorPrx;

}

namespace RoboCompCommonBehavior
{

enum class State : unsigned char
{
    Starting,
    Running
};

struct Parameter
{
    bool editable;
    ::std::string value;
    ::std::string type;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const bool&, const ::std::string&, const ::std::string&> ice_tuple() const
    {
        return std::tie(editable, value, type);
    }
};

using ParameterList = ::std::map<::std::string, Parameter>;

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace RoboCompCommonBehavior
{

class CommonBehavior : public virtual ::Ice::Object
{
public:

    using ProxyType = CommonBehaviorPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ParameterList getParameterList(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getParameterList(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual int getPeriod(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getPeriod(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual State getState(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getState(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void killYourSelf(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_killYourSelf(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void reloadConfig(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_reloadConfig(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void setParameterList(ParameterList l, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_setParameterList(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void setPeriod(int period, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_setPeriod(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual int timeAwake(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_timeAwake(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace RoboCompCommonBehavior
{

class CommonBehaviorPrx : public virtual ::Ice::Proxy<CommonBehaviorPrx, ::Ice::ObjectPrx>
{
public:

    ParameterList getParameterList(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompCommonBehavior::ParameterList>(true, this, &CommonBehaviorPrx::_iceI_getParameterList, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getParameterListAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompCommonBehavior::ParameterList>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompCommonBehavior::ParameterList, P>(false, this, &CommonBehaviorPrx::_iceI_getParameterList, context);
    }

    ::std::function<void()>
    getParameterListAsync(::std::function<void(::RoboCompCommonBehavior::ParameterList)> response,
                          ::std::function<void(::std::exception_ptr)> ex = nullptr,
                          ::std::function<void(bool)> sent = nullptr,
                          const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompCommonBehavior::ParameterList>(response, ex, sent, this, &RoboCompCommonBehavior::CommonBehaviorPrx::_iceI_getParameterList, context);
    }

    /// \cond INTERNAL
    void _iceI_getParameterList(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompCommonBehavior::ParameterList>>&, const ::Ice::Context&);
    /// \endcond

    int getPeriod(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<int>(true, this, &CommonBehaviorPrx::_iceI_getPeriod, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getPeriodAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<int>>().get_future())
    {
        return _makePromiseOutgoing<int, P>(false, this, &CommonBehaviorPrx::_iceI_getPeriod, context);
    }

    ::std::function<void()>
    getPeriodAsync(::std::function<void(int)> response,
                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                   ::std::function<void(bool)> sent = nullptr,
                   const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<int>(response, ex, sent, this, &RoboCompCommonBehavior::CommonBehaviorPrx::_iceI_getPeriod, context);
    }

    /// \cond INTERNAL
    void _iceI_getPeriod(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>&, const ::Ice::Context&);
    /// \endcond

    State getState(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompCommonBehavior::State>(true, this, &CommonBehaviorPrx::_iceI_getState, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getStateAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompCommonBehavior::State>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompCommonBehavior::State, P>(false, this, &CommonBehaviorPrx::_iceI_getState, context);
    }

    ::std::function<void()>
    getStateAsync(::std::function<void(::RoboCompCommonBehavior::State)> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompCommonBehavior::State>(response, ex, sent, this, &RoboCompCommonBehavior::CommonBehaviorPrx::_iceI_getState, context);
    }

    /// \cond INTERNAL
    void _iceI_getState(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompCommonBehavior::State>>&, const ::Ice::Context&);
    /// \endcond

    void killYourSelf(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &CommonBehaviorPrx::_iceI_killYourSelf, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto killYourSelfAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &CommonBehaviorPrx::_iceI_killYourSelf, context);
    }

    ::std::function<void()>
    killYourSelfAsync(::std::function<void()> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompCommonBehavior::CommonBehaviorPrx::_iceI_killYourSelf, context);
    }

    /// \cond INTERNAL
    void _iceI_killYourSelf(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    void reloadConfig(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &CommonBehaviorPrx::_iceI_reloadConfig, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto reloadConfigAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &CommonBehaviorPrx::_iceI_reloadConfig, context);
    }

    ::std::function<void()>
    reloadConfigAsync(::std::function<void()> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompCommonBehavior::CommonBehaviorPrx::_iceI_reloadConfig, context);
    }

    /// \cond INTERNAL
    void _iceI_reloadConfig(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    void setParameterList(const ParameterList& l, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &CommonBehaviorPrx::_iceI_setParameterList, l, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto setParameterListAsync(const ParameterList& l, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &CommonBehaviorPrx::_iceI_setParameterList, l, context);
    }

    ::std::function<void()>
    setParameterListAsync(const ParameterList& l,
                          ::std::function<void()> response,
                          ::std::function<void(::std::exception_ptr)> ex = nullptr,
                          ::std::function<void(bool)> sent = nullptr,
                          const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompCommonBehavior::CommonBehaviorPrx::_iceI_setParameterList, l, context);
    }

    /// \cond INTERNAL
    void _iceI_setParameterList(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ParameterList&, const ::Ice::Context&);
    /// \endcond

    void setPeriod(int period, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &CommonBehaviorPrx::_iceI_setPeriod, period, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto setPeriodAsync(int period, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &CommonBehaviorPrx::_iceI_setPeriod, period, context);
    }

    ::std::function<void()>
    setPeriodAsync(int period,
                   ::std::function<void()> response,
                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                   ::std::function<void(bool)> sent = nullptr,
                   const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompCommonBehavior::CommonBehaviorPrx::_iceI_setPeriod, period, context);
    }

    /// \cond INTERNAL
    void _iceI_setPeriod(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, int, const ::Ice::Context&);
    /// \endcond

    int timeAwake(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<int>(true, this, &CommonBehaviorPrx::_iceI_timeAwake, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto timeAwakeAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<int>>().get_future())
    {
        return _makePromiseOutgoing<int, P>(false, this, &CommonBehaviorPrx::_iceI_timeAwake, context);
    }

    ::std::function<void()>
    timeAwakeAsync(::std::function<void(int)> response,
                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                   ::std::function<void(bool)> sent = nullptr,
                   const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<int>(response, ex, sent, this, &RoboCompCommonBehavior::CommonBehaviorPrx::_iceI_timeAwake, context);
    }

    /// \cond INTERNAL
    void _iceI_timeAwake(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    CommonBehaviorPrx() = default;
    friend ::std::shared_ptr<CommonBehaviorPrx> IceInternal::createProxy<CommonBehaviorPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::RoboCompCommonBehavior::State>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 1;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits<::RoboCompCommonBehavior::Parameter>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompCommonBehavior::Parameter, S>
{
    static void read(S* istr, ::RoboCompCommonBehavior::Parameter& v)
    {
        istr->readAll(v.editable, v.value, v.type);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace RoboCompCommonBehavior
{

using CommonBehaviorPtr = ::std::shared_ptr<CommonBehavior>;
using CommonBehaviorPrxPtr = ::std::shared_ptr<CommonBehaviorPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace RoboCompCommonBehavior
{

class CommonBehavior;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< CommonBehavior>&);
::IceProxy::Ice::Object* upCast(CommonBehavior*);
/// \endcond

}

}

namespace RoboCompCommonBehavior
{

class CommonBehavior;
/// \cond INTERNAL
::Ice::Object* upCast(CommonBehavior*);
/// \endcond
typedef ::IceInternal::Handle< CommonBehavior> CommonBehaviorPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompCommonBehavior::CommonBehavior> CommonBehaviorPrx;
typedef CommonBehaviorPrx CommonBehaviorPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(CommonBehaviorPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace RoboCompCommonBehavior
{

enum State
{
    Starting,
    Running
};

struct Parameter
{
    bool editable;
    ::std::string value;
    ::std::string type;

    bool operator==(const Parameter& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(editable != rhs_.editable)
        {
            return false;
        }
        if(value != rhs_.value)
        {
            return false;
        }
        if(type != rhs_.type)
        {
            return false;
        }
        return true;
    }

    bool operator<(const Parameter& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(editable < rhs_.editable)
        {
            return true;
        }
        else if(rhs_.editable < editable)
        {
            return false;
        }
        if(value < rhs_.value)
        {
            return true;
        }
        else if(rhs_.value < value)
        {
            return false;
        }
        if(type < rhs_.type)
        {
            return true;
        }
        else if(rhs_.type < type)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const Parameter& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const Parameter& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const Parameter& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const Parameter& rhs_) const
    {
        return !operator<(rhs_);
    }
};

typedef ::std::map< ::std::string, Parameter> ParameterList;

}

namespace RoboCompCommonBehavior
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_getParameterList.
 * Create a wrapper instance by calling ::RoboCompCommonBehavior::newCallback_CommonBehavior_getParameterList.
 */
class Callback_CommonBehavior_getParameterList_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonBehavior_getParameterList_Base> Callback_CommonBehavior_getParameterListPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_getPeriod.
 * Create a wrapper instance by calling ::RoboCompCommonBehavior::newCallback_CommonBehavior_getPeriod.
 */
class Callback_CommonBehavior_getPeriod_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonBehavior_getPeriod_Base> Callback_CommonBehavior_getPeriodPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_getState.
 * Create a wrapper instance by calling ::RoboCompCommonBehavior::newCallback_CommonBehavior_getState.
 */
class Callback_CommonBehavior_getState_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonBehavior_getState_Base> Callback_CommonBehavior_getStatePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_killYourSelf.
 * Create a wrapper instance by calling ::RoboCompCommonBehavior::newCallback_CommonBehavior_killYourSelf.
 */
class Callback_CommonBehavior_killYourSelf_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonBehavior_killYourSelf_Base> Callback_CommonBehavior_killYourSelfPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_reloadConfig.
 * Create a wrapper instance by calling ::RoboCompCommonBehavior::newCallback_CommonBehavior_reloadConfig.
 */
class Callback_CommonBehavior_reloadConfig_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonBehavior_reloadConfig_Base> Callback_CommonBehavior_reloadConfigPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_setParameterList.
 * Create a wrapper instance by calling ::RoboCompCommonBehavior::newCallback_CommonBehavior_setParameterList.
 */
class Callback_CommonBehavior_setParameterList_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonBehavior_setParameterList_Base> Callback_CommonBehavior_setParameterListPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_setPeriod.
 * Create a wrapper instance by calling ::RoboCompCommonBehavior::newCallback_CommonBehavior_setPeriod.
 */
class Callback_CommonBehavior_setPeriod_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonBehavior_setPeriod_Base> Callback_CommonBehavior_setPeriodPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_timeAwake.
 * Create a wrapper instance by calling ::RoboCompCommonBehavior::newCallback_CommonBehavior_timeAwake.
 */
class Callback_CommonBehavior_timeAwake_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonBehavior_timeAwake_Base> Callback_CommonBehavior_timeAwakePtr;

}

namespace IceProxy
{

namespace RoboCompCommonBehavior
{

class CommonBehavior : public virtual ::Ice::Proxy<CommonBehavior, ::IceProxy::Ice::Object>
{
public:

    ::RoboCompCommonBehavior::ParameterList getParameterList(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getParameterList(_iceI_begin_getParameterList(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getParameterList(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getParameterList(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getParameterList(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getParameterList(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getParameterList(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getParameterList(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getParameterList(const ::RoboCompCommonBehavior::Callback_CommonBehavior_getParameterListPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getParameterList(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getParameterList(const ::Ice::Context& context, const ::RoboCompCommonBehavior::Callback_CommonBehavior_getParameterListPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getParameterList(context, cb, cookie);
    }

    ::RoboCompCommonBehavior::ParameterList end_getParameterList(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getParameterList(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Ice::Int getPeriod(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getPeriod(_iceI_begin_getPeriod(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getPeriod(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getPeriod(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPeriod(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPeriod(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPeriod(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPeriod(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPeriod(const ::RoboCompCommonBehavior::Callback_CommonBehavior_getPeriodPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPeriod(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPeriod(const ::Ice::Context& context, const ::RoboCompCommonBehavior::Callback_CommonBehavior_getPeriodPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPeriod(context, cb, cookie);
    }

    ::Ice::Int end_getPeriod(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getPeriod(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::RoboCompCommonBehavior::State getState(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getState(_iceI_begin_getState(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getState(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getState(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getState(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getState(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getState(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getState(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getState(const ::RoboCompCommonBehavior::Callback_CommonBehavior_getStatePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getState(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getState(const ::Ice::Context& context, const ::RoboCompCommonBehavior::Callback_CommonBehavior_getStatePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getState(context, cb, cookie);
    }

    ::RoboCompCommonBehavior::State end_getState(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getState(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void killYourSelf(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_killYourSelf(_iceI_begin_killYourSelf(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_killYourSelf(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_killYourSelf(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_killYourSelf(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_killYourSelf(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_killYourSelf(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_killYourSelf(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_killYourSelf(const ::RoboCompCommonBehavior::Callback_CommonBehavior_killYourSelfPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_killYourSelf(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_killYourSelf(const ::Ice::Context& context, const ::RoboCompCommonBehavior::Callback_CommonBehavior_killYourSelfPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_killYourSelf(context, cb, cookie);
    }

    void end_killYourSelf(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_killYourSelf(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void reloadConfig(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_reloadConfig(_iceI_begin_reloadConfig(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_reloadConfig(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_reloadConfig(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadConfig(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_reloadConfig(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadConfig(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_reloadConfig(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadConfig(const ::RoboCompCommonBehavior::Callback_CommonBehavior_reloadConfigPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_reloadConfig(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadConfig(const ::Ice::Context& context, const ::RoboCompCommonBehavior::Callback_CommonBehavior_reloadConfigPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_reloadConfig(context, cb, cookie);
    }

    void end_reloadConfig(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_reloadConfig(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void setParameterList(const ::RoboCompCommonBehavior::ParameterList& l, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_setParameterList(_iceI_begin_setParameterList(l, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_setParameterList(const ::RoboCompCommonBehavior::ParameterList& l, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_setParameterList(l, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setParameterList(const ::RoboCompCommonBehavior::ParameterList& l, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setParameterList(l, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setParameterList(const ::RoboCompCommonBehavior::ParameterList& l, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setParameterList(l, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setParameterList(const ::RoboCompCommonBehavior::ParameterList& l, const ::RoboCompCommonBehavior::Callback_CommonBehavior_setParameterListPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setParameterList(l, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setParameterList(const ::RoboCompCommonBehavior::ParameterList& l, const ::Ice::Context& context, const ::RoboCompCommonBehavior::Callback_CommonBehavior_setParameterListPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setParameterList(l, context, cb, cookie);
    }

    void end_setParameterList(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_setParameterList(const ::RoboCompCommonBehavior::ParameterList&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void setPeriod(::Ice::Int period, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_setPeriod(_iceI_begin_setPeriod(period, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_setPeriod(::Ice::Int period, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_setPeriod(period, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPeriod(::Ice::Int period, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setPeriod(period, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setPeriod(::Ice::Int period, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setPeriod(period, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setPeriod(::Ice::Int period, const ::RoboCompCommonBehavior::Callback_CommonBehavior_setPeriodPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setPeriod(period, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setPeriod(::Ice::Int period, const ::Ice::Context& context, const ::RoboCompCommonBehavior::Callback_CommonBehavior_setPeriodPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setPeriod(period, context, cb, cookie);
    }

    void end_setPeriod(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_setPeriod(::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Ice::Int timeAwake(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_timeAwake(_iceI_begin_timeAwake(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_timeAwake(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_timeAwake(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_timeAwake(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_timeAwake(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_timeAwake(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_timeAwake(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_timeAwake(const ::RoboCompCommonBehavior::Callback_CommonBehavior_timeAwakePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_timeAwake(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_timeAwake(const ::Ice::Context& context, const ::RoboCompCommonBehavior::Callback_CommonBehavior_timeAwakePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_timeAwake(context, cb, cookie);
    }

    ::Ice::Int end_timeAwake(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_timeAwake(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace RoboCompCommonBehavior
{

class CommonBehavior : public virtual ::Ice::Object
{
public:

    typedef CommonBehaviorPrx ProxyType;
    typedef CommonBehaviorPtr PointerType;

    virtual ~CommonBehavior();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ParameterList getParameterList(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getParameterList(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::Ice::Int getPeriod(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getPeriod(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual State getState(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getState(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void killYourSelf(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_killYourSelf(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void reloadConfig(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_reloadConfig(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void setParameterList(const ParameterList& l, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_setParameterList(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void setPeriod(::Ice::Int period, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_setPeriod(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::Ice::Int timeAwake(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_timeAwake(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const CommonBehavior& lhs, const CommonBehavior& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const CommonBehavior& lhs, const CommonBehavior& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::RoboCompCommonBehavior::State>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 1;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::RoboCompCommonBehavior::Parameter>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompCommonBehavior::Parameter, S>
{
    static void write(S* ostr, const ::RoboCompCommonBehavior::Parameter& v)
    {
        ostr->write(v.editable);
        ostr->write(v.value);
        ostr->write(v.type);
    }
};

template<typename S>
struct StreamReader< ::RoboCompCommonBehavior::Parameter, S>
{
    static void read(S* istr, ::RoboCompCommonBehavior::Parameter& v)
    {
        istr->read(v.editable);
        istr->read(v.value);
        istr->read(v.type);
    }
};

}
/// \endcond

namespace RoboCompCommonBehavior
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_getParameterList.
 * Create a wrapper instance by calling ::RoboCompCommonBehavior::newCallback_CommonBehavior_getParameterList.
 */
template<class T>
class CallbackNC_CommonBehavior_getParameterList : public Callback_CommonBehavior_getParameterList_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ParameterList&);

    CallbackNC_CommonBehavior_getParameterList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CommonBehaviorPrx proxy = CommonBehaviorPrx::uncheckedCast(result->getProxy());
        ParameterList ret;
        try
        {
            ret = proxy->end_getParameterList(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_getParameterList.
 */
template<class T> Callback_CommonBehavior_getParameterListPtr
newCallback_CommonBehavior_getParameterList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ParameterList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonBehavior_getParameterList<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_getParameterList.
 */
template<class T> Callback_CommonBehavior_getParameterListPtr
newCallback_CommonBehavior_getParameterList(T* instance, void (T::*cb)(const ParameterList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonBehavior_getParameterList<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_getParameterList.
 * Create a wrapper instance by calling ::RoboCompCommonBehavior::newCallback_CommonBehavior_getParameterList.
 */
template<class T, typename CT>
class Callback_CommonBehavior_getParameterList : public Callback_CommonBehavior_getParameterList_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ParameterList&, const CT&);

    Callback_CommonBehavior_getParameterList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CommonBehaviorPrx proxy = CommonBehaviorPrx::uncheckedCast(result->getProxy());
        ParameterList ret;
        try
        {
            ret = proxy->end_getParameterList(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_getParameterList.
 */
template<class T, typename CT> Callback_CommonBehavior_getParameterListPtr
newCallback_CommonBehavior_getParameterList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ParameterList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonBehavior_getParameterList<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_getParameterList.
 */
template<class T, typename CT> Callback_CommonBehavior_getParameterListPtr
newCallback_CommonBehavior_getParameterList(T* instance, void (T::*cb)(const ParameterList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonBehavior_getParameterList<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_getPeriod.
 * Create a wrapper instance by calling ::RoboCompCommonBehavior::newCallback_CommonBehavior_getPeriod.
 */
template<class T>
class CallbackNC_CommonBehavior_getPeriod : public Callback_CommonBehavior_getPeriod_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_CommonBehavior_getPeriod(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CommonBehaviorPrx proxy = CommonBehaviorPrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_getPeriod(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_getPeriod.
 */
template<class T> Callback_CommonBehavior_getPeriodPtr
newCallback_CommonBehavior_getPeriod(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonBehavior_getPeriod<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_getPeriod.
 */
template<class T> Callback_CommonBehavior_getPeriodPtr
newCallback_CommonBehavior_getPeriod(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonBehavior_getPeriod<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_getPeriod.
 * Create a wrapper instance by calling ::RoboCompCommonBehavior::newCallback_CommonBehavior_getPeriod.
 */
template<class T, typename CT>
class Callback_CommonBehavior_getPeriod : public Callback_CommonBehavior_getPeriod_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_CommonBehavior_getPeriod(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CommonBehaviorPrx proxy = CommonBehaviorPrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_getPeriod(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_getPeriod.
 */
template<class T, typename CT> Callback_CommonBehavior_getPeriodPtr
newCallback_CommonBehavior_getPeriod(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonBehavior_getPeriod<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_getPeriod.
 */
template<class T, typename CT> Callback_CommonBehavior_getPeriodPtr
newCallback_CommonBehavior_getPeriod(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonBehavior_getPeriod<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_getState.
 * Create a wrapper instance by calling ::RoboCompCommonBehavior::newCallback_CommonBehavior_getState.
 */
template<class T>
class CallbackNC_CommonBehavior_getState : public Callback_CommonBehavior_getState_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(State);

    CallbackNC_CommonBehavior_getState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CommonBehaviorPrx proxy = CommonBehaviorPrx::uncheckedCast(result->getProxy());
        State ret;
        try
        {
            ret = proxy->end_getState(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_getState.
 */
template<class T> Callback_CommonBehavior_getStatePtr
newCallback_CommonBehavior_getState(const IceUtil::Handle<T>& instance, void (T::*cb)(State), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonBehavior_getState<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_getState.
 */
template<class T> Callback_CommonBehavior_getStatePtr
newCallback_CommonBehavior_getState(T* instance, void (T::*cb)(State), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonBehavior_getState<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_getState.
 * Create a wrapper instance by calling ::RoboCompCommonBehavior::newCallback_CommonBehavior_getState.
 */
template<class T, typename CT>
class Callback_CommonBehavior_getState : public Callback_CommonBehavior_getState_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(State, const CT&);

    Callback_CommonBehavior_getState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CommonBehaviorPrx proxy = CommonBehaviorPrx::uncheckedCast(result->getProxy());
        State ret;
        try
        {
            ret = proxy->end_getState(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_getState.
 */
template<class T, typename CT> Callback_CommonBehavior_getStatePtr
newCallback_CommonBehavior_getState(const IceUtil::Handle<T>& instance, void (T::*cb)(State, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonBehavior_getState<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_getState.
 */
template<class T, typename CT> Callback_CommonBehavior_getStatePtr
newCallback_CommonBehavior_getState(T* instance, void (T::*cb)(State, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonBehavior_getState<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_killYourSelf.
 * Create a wrapper instance by calling ::RoboCompCommonBehavior::newCallback_CommonBehavior_killYourSelf.
 */
template<class T>
class CallbackNC_CommonBehavior_killYourSelf : public Callback_CommonBehavior_killYourSelf_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CommonBehavior_killYourSelf(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_killYourSelf.
 */
template<class T> Callback_CommonBehavior_killYourSelfPtr
newCallback_CommonBehavior_killYourSelf(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonBehavior_killYourSelf<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_killYourSelf.
 */
template<class T> Callback_CommonBehavior_killYourSelfPtr
newCallback_CommonBehavior_killYourSelf(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonBehavior_killYourSelf<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_killYourSelf.
 */
template<class T> Callback_CommonBehavior_killYourSelfPtr
newCallback_CommonBehavior_killYourSelf(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonBehavior_killYourSelf<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_killYourSelf.
 */
template<class T> Callback_CommonBehavior_killYourSelfPtr
newCallback_CommonBehavior_killYourSelf(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonBehavior_killYourSelf<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_killYourSelf.
 * Create a wrapper instance by calling ::RoboCompCommonBehavior::newCallback_CommonBehavior_killYourSelf.
 */
template<class T, typename CT>
class Callback_CommonBehavior_killYourSelf : public Callback_CommonBehavior_killYourSelf_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CommonBehavior_killYourSelf(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_killYourSelf.
 */
template<class T, typename CT> Callback_CommonBehavior_killYourSelfPtr
newCallback_CommonBehavior_killYourSelf(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonBehavior_killYourSelf<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_killYourSelf.
 */
template<class T, typename CT> Callback_CommonBehavior_killYourSelfPtr
newCallback_CommonBehavior_killYourSelf(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonBehavior_killYourSelf<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_killYourSelf.
 */
template<class T, typename CT> Callback_CommonBehavior_killYourSelfPtr
newCallback_CommonBehavior_killYourSelf(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonBehavior_killYourSelf<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_killYourSelf.
 */
template<class T, typename CT> Callback_CommonBehavior_killYourSelfPtr
newCallback_CommonBehavior_killYourSelf(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonBehavior_killYourSelf<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_reloadConfig.
 * Create a wrapper instance by calling ::RoboCompCommonBehavior::newCallback_CommonBehavior_reloadConfig.
 */
template<class T>
class CallbackNC_CommonBehavior_reloadConfig : public Callback_CommonBehavior_reloadConfig_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CommonBehavior_reloadConfig(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_reloadConfig.
 */
template<class T> Callback_CommonBehavior_reloadConfigPtr
newCallback_CommonBehavior_reloadConfig(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonBehavior_reloadConfig<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_reloadConfig.
 */
template<class T> Callback_CommonBehavior_reloadConfigPtr
newCallback_CommonBehavior_reloadConfig(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonBehavior_reloadConfig<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_reloadConfig.
 */
template<class T> Callback_CommonBehavior_reloadConfigPtr
newCallback_CommonBehavior_reloadConfig(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonBehavior_reloadConfig<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_reloadConfig.
 */
template<class T> Callback_CommonBehavior_reloadConfigPtr
newCallback_CommonBehavior_reloadConfig(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonBehavior_reloadConfig<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_reloadConfig.
 * Create a wrapper instance by calling ::RoboCompCommonBehavior::newCallback_CommonBehavior_reloadConfig.
 */
template<class T, typename CT>
class Callback_CommonBehavior_reloadConfig : public Callback_CommonBehavior_reloadConfig_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CommonBehavior_reloadConfig(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_reloadConfig.
 */
template<class T, typename CT> Callback_CommonBehavior_reloadConfigPtr
newCallback_CommonBehavior_reloadConfig(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonBehavior_reloadConfig<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_reloadConfig.
 */
template<class T, typename CT> Callback_CommonBehavior_reloadConfigPtr
newCallback_CommonBehavior_reloadConfig(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonBehavior_reloadConfig<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_reloadConfig.
 */
template<class T, typename CT> Callback_CommonBehavior_reloadConfigPtr
newCallback_CommonBehavior_reloadConfig(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonBehavior_reloadConfig<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_reloadConfig.
 */
template<class T, typename CT> Callback_CommonBehavior_reloadConfigPtr
newCallback_CommonBehavior_reloadConfig(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonBehavior_reloadConfig<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_setParameterList.
 * Create a wrapper instance by calling ::RoboCompCommonBehavior::newCallback_CommonBehavior_setParameterList.
 */
template<class T>
class CallbackNC_CommonBehavior_setParameterList : public Callback_CommonBehavior_setParameterList_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CommonBehavior_setParameterList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_setParameterList.
 */
template<class T> Callback_CommonBehavior_setParameterListPtr
newCallback_CommonBehavior_setParameterList(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonBehavior_setParameterList<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_setParameterList.
 */
template<class T> Callback_CommonBehavior_setParameterListPtr
newCallback_CommonBehavior_setParameterList(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonBehavior_setParameterList<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_setParameterList.
 */
template<class T> Callback_CommonBehavior_setParameterListPtr
newCallback_CommonBehavior_setParameterList(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonBehavior_setParameterList<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_setParameterList.
 */
template<class T> Callback_CommonBehavior_setParameterListPtr
newCallback_CommonBehavior_setParameterList(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonBehavior_setParameterList<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_setParameterList.
 * Create a wrapper instance by calling ::RoboCompCommonBehavior::newCallback_CommonBehavior_setParameterList.
 */
template<class T, typename CT>
class Callback_CommonBehavior_setParameterList : public Callback_CommonBehavior_setParameterList_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CommonBehavior_setParameterList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_setParameterList.
 */
template<class T, typename CT> Callback_CommonBehavior_setParameterListPtr
newCallback_CommonBehavior_setParameterList(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonBehavior_setParameterList<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_setParameterList.
 */
template<class T, typename CT> Callback_CommonBehavior_setParameterListPtr
newCallback_CommonBehavior_setParameterList(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonBehavior_setParameterList<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_setParameterList.
 */
template<class T, typename CT> Callback_CommonBehavior_setParameterListPtr
newCallback_CommonBehavior_setParameterList(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonBehavior_setParameterList<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_setParameterList.
 */
template<class T, typename CT> Callback_CommonBehavior_setParameterListPtr
newCallback_CommonBehavior_setParameterList(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonBehavior_setParameterList<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_setPeriod.
 * Create a wrapper instance by calling ::RoboCompCommonBehavior::newCallback_CommonBehavior_setPeriod.
 */
template<class T>
class CallbackNC_CommonBehavior_setPeriod : public Callback_CommonBehavior_setPeriod_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CommonBehavior_setPeriod(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_setPeriod.
 */
template<class T> Callback_CommonBehavior_setPeriodPtr
newCallback_CommonBehavior_setPeriod(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonBehavior_setPeriod<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_setPeriod.
 */
template<class T> Callback_CommonBehavior_setPeriodPtr
newCallback_CommonBehavior_setPeriod(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonBehavior_setPeriod<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_setPeriod.
 */
template<class T> Callback_CommonBehavior_setPeriodPtr
newCallback_CommonBehavior_setPeriod(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonBehavior_setPeriod<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_setPeriod.
 */
template<class T> Callback_CommonBehavior_setPeriodPtr
newCallback_CommonBehavior_setPeriod(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonBehavior_setPeriod<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_setPeriod.
 * Create a wrapper instance by calling ::RoboCompCommonBehavior::newCallback_CommonBehavior_setPeriod.
 */
template<class T, typename CT>
class Callback_CommonBehavior_setPeriod : public Callback_CommonBehavior_setPeriod_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CommonBehavior_setPeriod(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_setPeriod.
 */
template<class T, typename CT> Callback_CommonBehavior_setPeriodPtr
newCallback_CommonBehavior_setPeriod(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonBehavior_setPeriod<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_setPeriod.
 */
template<class T, typename CT> Callback_CommonBehavior_setPeriodPtr
newCallback_CommonBehavior_setPeriod(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonBehavior_setPeriod<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_setPeriod.
 */
template<class T, typename CT> Callback_CommonBehavior_setPeriodPtr
newCallback_CommonBehavior_setPeriod(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonBehavior_setPeriod<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_setPeriod.
 */
template<class T, typename CT> Callback_CommonBehavior_setPeriodPtr
newCallback_CommonBehavior_setPeriod(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonBehavior_setPeriod<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_timeAwake.
 * Create a wrapper instance by calling ::RoboCompCommonBehavior::newCallback_CommonBehavior_timeAwake.
 */
template<class T>
class CallbackNC_CommonBehavior_timeAwake : public Callback_CommonBehavior_timeAwake_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_CommonBehavior_timeAwake(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CommonBehaviorPrx proxy = CommonBehaviorPrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_timeAwake(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_timeAwake.
 */
template<class T> Callback_CommonBehavior_timeAwakePtr
newCallback_CommonBehavior_timeAwake(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonBehavior_timeAwake<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_timeAwake.
 */
template<class T> Callback_CommonBehavior_timeAwakePtr
newCallback_CommonBehavior_timeAwake(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonBehavior_timeAwake<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_timeAwake.
 * Create a wrapper instance by calling ::RoboCompCommonBehavior::newCallback_CommonBehavior_timeAwake.
 */
template<class T, typename CT>
class Callback_CommonBehavior_timeAwake : public Callback_CommonBehavior_timeAwake_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_CommonBehavior_timeAwake(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CommonBehaviorPrx proxy = CommonBehaviorPrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_timeAwake(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_timeAwake.
 */
template<class T, typename CT> Callback_CommonBehavior_timeAwakePtr
newCallback_CommonBehavior_timeAwake(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonBehavior_timeAwake<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_timeAwake.
 */
template<class T, typename CT> Callback_CommonBehavior_timeAwakePtr
newCallback_CommonBehavior_timeAwake(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonBehavior_timeAwake<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
